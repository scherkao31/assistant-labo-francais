#!/usr/bin/env python3
"""
Script d'installation automatique pour l'assistant m√©dical fran√ßais
"""

import os
import sys
import subprocess
from pathlib import Path

def check_python_version():
    """
    V√©rifier la version de Python
    """
    if sys.version_info < (3, 8):
        print("‚ùå Python 3.8 ou sup√©rieur requis")
        print(f"Version actuelle: {sys.version}")
        return False
    
    print(f"‚úÖ Python {sys.version_info.major}.{sys.version_info.minor} d√©tect√©")
    return True

def install_requirements():
    """
    Installer les d√©pendances
    """
    print("üì¶ Installation des d√©pendances...")
    
    try:
        subprocess.run([
            sys.executable, "-m", "pip", "install", "-r", "requirements.txt"
        ], check=True, capture_output=True, text=True)
        print("‚úÖ D√©pendances install√©es")
        return True
    except subprocess.CalledProcessError as e:
        print(f"‚ùå Erreur d'installation: {e}")
        print("Sortie d'erreur:")
        print(e.stderr)
        return False

def create_env_file():
    """
    Cr√©er le fichier .env
    """
    env_file = Path(".env")
    
    if env_file.exists():
        print("‚ö†Ô∏è  Le fichier .env existe d√©j√†")
        return True
    
    print("üîß Cr√©ation du fichier .env...")
    
    openai_key = input("üîë Entrez votre cl√© API OpenAI: ").strip()
    
    if not openai_key:
        print("‚ùå Cl√© API OpenAI requise")
        return False
    
    env_content = f"""OPENAI_API_KEY={openai_key}
FLASK_DEBUG=True
FLASK_PORT=5000
SECRET_KEY=medical-assistant-secret-key-change-in-production
"""
    
    try:
        with open(".env", "w") as f:
            f.write(env_content)
        print("‚úÖ Fichier .env cr√©√©")
        return True
    except Exception as e:
        print(f"‚ùå Erreur cr√©ation .env: {e}")
        return False

def verify_data_files():
    """
    V√©rifier les fichiers de donn√©es
    """
    print("üìÅ V√©rification des donn√©es...")
    
    data_dir = Path("data")
    if not data_dir.exists():
        print("‚ùå Dossier 'data' introuvable")
        return False
    
    md_files = list(data_dir.glob("*.md"))
    if not md_files:
        print("‚ùå Aucun fichier .md trouv√© dans 'data'")
        return False
    
    print(f"‚úÖ {len(md_files)} fichiers de donn√©es trouv√©s:")
    for f in md_files:
        print(f"  - {f.name}")
    
    return True

def initialize_database():
    """
    Initialiser la base de donn√©es
    """
    print("üóÑÔ∏è  Initialisation de la base de donn√©es...")
    
    try:
        subprocess.run([
            sys.executable, "setup_database.py"
        ], check=True, capture_output=True, text=True)
        print("‚úÖ Base de donn√©es initialis√©e")
        return True
    except subprocess.CalledProcessError as e:
        print(f"‚ùå Erreur initialisation base de donn√©es: {e}")
        print("Sortie d'erreur:")
        print(e.stderr)
        return False

def run_tests():
    """
    Lancer les tests
    """
    print("üß™ Lancement des tests...")
    
    try:
        subprocess.run([
            sys.executable, "test_system.py"
        ], check=True, capture_output=True, text=True)
        print("‚úÖ Tests r√©ussis")
        return True
    except subprocess.CalledProcessError as e:
        print(f"‚ùå Erreur tests: {e}")
        print("Sortie d'erreur:")
        print(e.stderr)
        return False

def main():
    """
    Installation compl√®te
    """
    print("üöÄ Installation de l'Assistant M√©dical Fran√ßais")
    print("=" * 60)
    
    steps = [
        ("V√©rification Python", check_python_version),
        ("Installation d√©pendances", install_requirements),
        ("Configuration .env", create_env_file),
        ("V√©rification donn√©es", verify_data_files),
        ("Initialisation base de donn√©es", initialize_database),
        ("Tests du syst√®me", run_tests)
    ]
    
    for step_name, step_func in steps:
        print(f"\nüìã {step_name}...")
        if not step_func():
            print(f"‚ùå √âchec: {step_name}")
            sys.exit(1)
    
    print("\n" + "=" * 60)
    print("üéâ Installation termin√©e avec succ√®s!")
    print()
    print("üìç Prochaines √©tapes:")
    print("1. Lancez l'application: python app.py")
    print("2. Ouvrez votre navigateur: http://localhost:5000")
    print("3. Posez vos questions en fran√ßais!")
    print()
    print("üîß Commandes utiles:")
    print("- Reconstruire la base de donn√©es: python setup_database.py")
    print("- Tester le syst√®me: python test_system.py")
    print("- Lancer l'application: python app.py")

if __name__ == "__main__":
    main() 